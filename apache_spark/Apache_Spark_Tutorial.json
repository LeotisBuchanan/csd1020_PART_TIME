{"paragraphs":[{"text":"%md ## Course Name:  CSDA 1020 – Big Data Tools\n## Day #: Onsite Session\n## Module Name:  Apache Hadoop and Spark","user":"anonymous","dateUpdated":"2018-08-12T06:43:42-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Course Name: CSDA 1020 – Big Data Tools</h2>\n<h2>Day #: 1</h2>\n<h2>Module Name: Apache Hadoop and Spark</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651021_979137132","id":"20180723-125604_1509127546","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13996"},{"text":"%md\n<p align=\"center\">\n  <b><h1>Introduction to Apache Spark</h1></b>\n  <img src=\"https://spark.apache.org/images/spark-logo-trademark.png\">\n  <img src=\"https://learn.continue.yorku.ca/theme/scs/pix/york-logo.png\">\n</p>","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p align=\"center\">\n  <b><h1>Introduction to Apache Spark</h1></b>\n  <img src=\"https://spark.apache.org/images/spark-logo-trademark.png\">\n  <img src=\"https://learn.continue.yorku.ca/theme/scs/pix/york-logo.png\">\n</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651057_-138928458","id":"20180723-130053_935535631","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:13997"},{"text":"%python\n myRange = spark.range(1000).toDF(\"number\")\n","user":"anonymous","dateUpdated":"2018-07-24T12:27:14-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-658530101424320468.py\", line 313, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'spark' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-658530101424320468.py\", line 320, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-658530101424320468.py\", line 313, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'spark' is not defined\n\n"}]},"apps":[],"jobName":"paragraph_1532449577340_-1612913173","id":"20180724-122617_461536053","dateCreated":"2018-07-24T12:26:17-0400","dateStarted":"2018-07-24T12:27:14-0400","dateFinished":"2018-07-24T12:27:14-0400","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:13998"},{"text":"%md ## Links \n\n<p><a href=\"https://spark.apache.org/docs/latest/api/sql/index.html\" target=\"_blank\">Spark SQL doc</a></p>\n<p><a href=\"http://data.gdeltproject.org/documentation/GDELT-Event_Codebook-V2.0.pdf\" target=\"_blank\">GDELT events doc</a></p>\n<p><a href=\"http://data.gdeltproject.org/gdeltv2/masterfilelist.txt\" target=\"_blank\">GDELT Masterfiles</a></p>\n\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Links</h2>\n<p><a href=\"https://spark.apache.org/docs/latest/api/sql/index.html\" target=\"_blank\">Spark SQL doc</a></p>\n<p><a href=\"http://data.gdeltproject.org/documentation/GDELT-Event_Codebook-V2.0.pdf\" target=\"_blank\">GDELT events doc</a></p>\n<p><a href=\"http://data.gdeltproject.org/gdeltv2/masterfilelist.txt\" target=\"_blank\">GDELT Masterfiles</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651058_-2010549986","id":"20180722-202939_1955743710","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:13999"},{"text":"%md # Apache Spark ","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Apache Spark</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651059_888744806","id":"20180722-170716_1445441319","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14000"},{"text":"%md We need to import the libraries\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651060_-104778025","id":"20180722-175206_282773407","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14001"},{"text":"import org.apache.spark.sql.{Dataset, DataFrame, SparkSession, Row}\n\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.{Dataset, DataFrame, SparkSession, Row}\n"}]},"apps":[],"jobName":"paragraph_1532441651061_-124736587","id":"20180722-175228_1178742176","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14002"},{"text":"%md ### The Spark Session \nThis is a driver process that allows you to your Spark Application . The SparkSession instance is the way Spark executes user-defined manipulations across the cluster. \nEvery spark application must have a spark session. When you are using zeppelin or the spark-shell from the command line a spark session object is provided. typing\nspark and running the cell will print the hashcode for the provided spark session.","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>The Spark Session</h3>\n<p>This is a driver process that allows you to your Spark Applicatio . The SparkSession instance is the way Spark executes user-defined manipulations across the cluster.<br/>Every spark application must have a spark session. When you are using zeppelin or the spark-shell from the command line a spark session object is provided. typing<br/>spark and running the cell will print the hashcode for the provided spark session.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651062_-1689328580","id":"20180722-172614_850846444","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14003"},{"text":"%md ## DataFrames\n\nA DataFrame is the most common Structured API and simply represents a table of data with rows and columns. The list that defines the columns and the types within those columns is called the schema.\nYou can think of a DataFrame as a spreadsheet with named columns. A spreadsheet sits on one computer in one specific location, whereas a Spark DataFrame can span thousands of computers.\nThe reason for putting the data on more than one is because the data is too large to fit on one machine or it would simply take too long to perform that computation on one machine.","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>DataFrames</h2>\n<p>A DataFrame is the most common Structured API and simply represents a table of data with rows and columns. The list that defines the columns and the types within those columns is called the schema.<br/>You can think of a DataFrame as a spreadsheet with named columns. A spreadsheet sits on one computer in one specific location, whereas a Spark DataFrame can span thousands of computers.<br/>The reason for putting the data on more than one is because the data is too large to fit on one machine or it would simply take too long to perform that computation on one machine.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651062_-2138878388","id":"20180722-173308_1110968012","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14004"},{"text":"%md ### Lets create a dataframe. \n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651063_1762575207","id":"20180722-173452_710942362","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14005"},{"text":"val base_path=\"file:///home/yard\"\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"base_path: String = file:///home/yard\n"}]},"apps":[],"jobName":"paragraph_1532441651065_90421759","id":"20180722-204009_2093834993","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14006"},{"text":"\nval data_path=\"file:///home/yard/data/flight-data/csv/2015-summary.csv\"\nval flightData2015 = spark.read.option(\"inferSchema\", \"true\").option(\"header\", \"true\").csv(data_path)","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"data_path: String = file:///home/yard/data/flight-data/csv/2015-summary.csv\nflightData2015: org.apache.spark.sql.DataFrame = [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1532441651066_-2063975557","id":"20180722-174911_657022667","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14007"},{"user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651066_-80321235","id":"20180722-203318_1984476731","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14008"},{"text":"%md ## Partitions\n\nTo allow every executor to perform work in parallel, Spark breaks up the data into chunks called partitions.\nA partition is a collection of rows that sit on one physical machine in your cluster. \nA DataFrame’s partitions represent how the data is physically distributed across the cluster of machines during execution.\nIf you have one partition, Spark will have a parallelism of only one, even if you have thousands of executors. \nIf you have many partitions but only one executor, Spark will still have a parallelism of only one because there is only one computation resource.\n\n\n\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Partitions</h2>\n<p>To allow every executor to perform work in parallel, Spark breaks up the data into chunks called partitions.<br/>A partition is a collection of rows that sit on one physical machine in your cluster.<br/>A DataFrame’s partitions represent how the data is physically distributed across the cluster of machines during execution.<br/>If you have one partition, Spark will have a parallelism of only one, even if you have thousands of executors.<br/>If you have many partitions but only one executor, Spark will still have a parallelism of only one because there is only one computation resource.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651067_-930909855","id":"20180722-195836_1657161004","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14009"},{"text":"%md ## DataFrame Transformations\nIn Spark, the core data structures are immutable, meaning they cannot be changed after they’re created. \nTo “change” a DataFrame, you need to instruct Spark how you would like to modify it to do what you want. \nThese instructions are called transformations. Let’s perform a simple transformation to find all even numbers in dataframe:\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>DataFrame Transformations</h2>\n<p>In Spark, the core data structures are immutable, meaning they cannot be changed after they’re created.<br/>To “change” a DataFrame, you need to instruct Spark how you would like to modify it to do what you want.<br/>These instructions are called transformations. Let’s perform a simple transformation to find all even numbers in dataframe:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651067_2071946589","id":"20180722-200406_1815872888","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14010"},{"text":"val myRange = spark.range(1000).toDF(\"number\")\n\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myRange: org.apache.spark.sql.DataFrame = [number: bigint]\n"}]},"apps":[],"jobName":"paragraph_1532441651068_-1574970038","id":"20180722-200603_1405236837","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14011"},{"text":"val divisBy2 = myRange.where(\"number % 2 = 0\")\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"divisBy2: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [number: bigint]\n"}]},"apps":[],"jobName":"paragraph_1532441651068_1235363862","id":"20180722-200626_1662129740","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14012"},{"text":"divisBy2.show","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651069_-1629505172","id":"20180722-200940_1212044235","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14013"},{"text":"%md ## Basic Structured Operations\nThese operations allow us to manipulate a dataframe and the data within them. Dataframe have schemas. \nSchemas define the name as well as the type of data in each column","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Basic Structured Operations</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651070_-1951414100","id":"20180722-203653_393373996","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14014"},{"text":"%md ## Let’s create a DataFrame with which we can work:\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651070_-787574094","id":"20180722-203912_758042470","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14015"},{"text":"\nval df = spark.read.format(\"json\").load(s\"$base_path/data/flight-data/json/2015-summary.json\")","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df: org.apache.spark.sql.DataFrame = [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1532441651071_-2077443370","id":"20180722-203920_1425493191","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14016"},{"text":"%md we can view a dataframe schema using the following command:","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651071_-1771329841","id":"20180722-204231_765253127","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14017"},{"text":"df.printSchema()","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- DEST_COUNTRY_NAME: string (nullable = true)\n |-- ORIGIN_COUNTRY_NAME: string (nullable = true)\n |-- count: long (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1532441651072_-796894137","id":"20180722-204302_1980909249","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14018"},{"text":"%md ## Schemas\nA schema defines the column names and types of a DataFrame.\nWe can either let a data source define the schema (called schema-on-read) or we can define it explicitly ourselves","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Schemas</h2>\n<p>A schema defines the column names and types of a DataFrame.<br/>We can either let a data source define the schema (called schema-on-read) or we can define it explicitly ourselves</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651072_-1055814931","id":"20180722-205513_237899569","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14019"},{"text":"%md\nLet's start with a simple file. This is flight data from the United States Bureau of Transportation statistics\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651072_-105840418","id":"20180722-205603_120781100","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14020"},{"text":"spark.read.format(\"json\").load(s\"$base_path/data/flight-data/json/2015-summary.json\").schema\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res17: org.apache.spark.sql.types.StructType = StructType(StructField(DEST_COUNTRY_NAME,StringType,true), StructField(ORIGIN_COUNTRY_NAME,StringType,true), StructField(count,LongType,true))\n"}]},"apps":[],"jobName":"paragraph_1532441651073_-1336745659","id":"20180722-211902_329693283","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14021"},{"text":"%md A schema is a StructType made up of a number of fields, StructFields, that have a name, type, \na Boolean flag which specifies whether that column can contain missing or null values, and, \nfinally, users can optionally specify associated metadata with that column. The metadata is \na way of storing information about this column","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>A schema is a StructType made up of a number of fields, StructFields, that have a name, type,<br/>a Boolean flag which specifies whether that column can contain missing or null values, and,<br/>finally, users can optionally specify associated metadata with that column. The metadata is<br/>a way of storing information about this column</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651073_-307128820","id":"20180722-212031_983713339","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14022"},{"text":"%md Schemas can contain other StructTypes ( see: <a href=\"https://docs.databricks.com/spark/latest/dataframes-datasets/complex-nested-data.html\" target=\"_blank\">Spark’s complex types </a>)  \nIf the types in the data (at runtime) do not match the schema, Spark will throw an error. \nThe example that below shows how to create and enforce a specific schema on a DataFrame","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Schemas can contain other StructTypes ( see: <a href=\"https://docs.databricks.com/spark/latest/dataframes-datasets/complex-nested-data.html\" target=\"_blank\">Spark’s complex types </a>)<br/>If the types in the data (at runtime) do not match the schema, Spark will throw an error. The example that follows shows how to create and enforce a specific schema on a DataFrame</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651074_98371032","id":"20180722-200711_1591421905","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14023"},{"text":"\nimport org.apache.spark.sql.types.{StructField, StructType, StringType, LongType}\nimport org.apache.spark.sql.types.Metadata\n\nval myManualSchema = StructType(Array(StructField(\"DEST_COUNTRY_NAME\", StringType, true),\nStructField(\"ORIGIN_COUNTRY_NAME\", StringType, true), \nStructField(\"count\", LongType, false, \nMetadata.fromJson(\"{\\\"hello\\\":\\\"world\\\"}\"))))\n\nval df = spark.read.format(\"json\").schema(myManualSchema)  .load(s\"$base_path/data/flight-data/json/2015-summary.json\")","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.types.{StructField, StructType, StringType, LongType}\nimport org.apache.spark.sql.types.Metadata\nmyManualSchema: org.apache.spark.sql.types.StructType = StructType(StructField(DEST_COUNTRY_NAME,StringType,true), StructField(ORIGIN_COUNTRY_NAME,StringType,true), StructField(count,LongType,false))\ndf: org.apache.spark.sql.DataFrame = [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1532441651074_-429113126","id":"20180722-212124_1629179164","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14024"},{"text":"%md ## Columns and Expressions\n\nColumns in Spark are similar to columns in a spreadsheet, R dataframe, or pandas DataFrame. \nYou can select, manipulate, and remove columns from DataFrames and these operations are represented as expressions.\nTo Spark, columns are logical constructions that simply represent a value computed on a per-record basis by means of an expression.\nThis means that to have a real value for a column, we need to have a row; and to have a row, we need to have a DataFrame. \nYou cannot manipulate an individual column outside the context of a DataFrame; \nyou must use Spark transformations within a DataFrame to modify the contents of a column.Columns\nThere are a lot of different ways to construct and refer to columns but the two simplest ways are by using the col or column functions. \nTo use either of these functions, you pass in a column name:","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Columns and Expressions</h2>\n<p>Columns in Spark are similar to columns in a spreadsheet, R dataframe, or pandas DataFrame.<br/>You can select, manipulate, and remove columns from DataFrames and these operations are represented as expressions.<br/>To Spark, columns are logical constructions that simply represent a value computed on a per-record basis by means of an expression.<br/>This means that to have a real value for a column, we need to have a row; and to have a row, we need to have a DataFrame.<br/>You cannot manipulate an individual column outside the context of a DataFrame;<br/>you must use Spark transformations within a DataFrame to modify the contents of a column.Columns<br/>There are a lot of different ways to construct and refer to columns but the two simplest ways are by using the col or column functions.<br/>To use either of these functions, you pass in a column name:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651075_-672192362","id":"20180722-215258_643366237","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14025"},{"text":"%md ## Accessing columns in a dataframe\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Accessing columns in a dataframe</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651075_-1093115612","id":"20180722-215436_25009366","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14026"},{"text":"%md If you need to refer to a specific DataFrame’s column, you can use the col method on the specific DataFrame. \nThis can be useful when you are performing a join and need to refer to a specific column in one DataFrame that might share\na name with another column in the joined DataFrame","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>If you need to refer to a specific DataFrame’s column,<br/>you can use the col method on the specific DataFrame.<br/>This can be useful when you are performing a join and need<br/>to refer to a specific column in one DataFrame that might share<br/>a name with another column in the joined DataFrame</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651076_-1425888225","id":"20180722-215748_237838522","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14027"},{"text":"\nval df2 = df.select( df.col(\"count\") - 1 )\n\ndf2.show\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df2: org.apache.spark.sql.DataFrame = [(count - 1): bigint]\n+-----------+\n|(count - 1)|\n+-----------+\n|         14|\n|          0|\n|        343|\n|         14|\n|         61|\n|          0|\n|         61|\n|        587|\n|         39|\n|          0|\n|        324|\n|         38|\n|         63|\n|          0|\n|         40|\n|         29|\n|          5|\n|          3|\n|        229|\n|          0|\n+-----------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532441651077_199746430","id":"20180722-215928_14814522","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14028"},{"text":"df.columns","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res41: Array[String] = Array(DEST_COUNTRY_NAME, ORIGIN_COUNTRY_NAME, count)\n"}]},"apps":[],"jobName":"paragraph_1532441651077_1560124353","id":"20180722-220548_1232663234","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14029"},{"text":"%md ### Records and Rows\nIn Spark, each row in a DataFrame is a single record. Spark represents this record as an object of type Row. \nSpark manipulates Row objects using column expressions in order to produce usable values. \nRow objects internally represent arrays of bytes. \n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Records and Rows</h3>\n<p>In Spark, each row in a DataFrame is a single record. Spark represents this record as an object of type Row.<br/>Spark manipulates Row objects using column expressions in order to produce usable values.<br/>Row objects internally represent arrays of bytes.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651078_-979422767","id":"20180722-220639_143205620","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14030"},{"text":"\ndf.first()","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res43: org.apache.spark.sql.Row = [United States,Romania,15]\n"}]},"apps":[],"jobName":"paragraph_1532441651081_99307789","id":"20180722-220757_31318517","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14031"},{"text":"df.take(2)","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res45: Array[org.apache.spark.sql.Row] = Array([United States,Romania,15], [United States,Croatia,1])\n"}]},"apps":[],"jobName":"paragraph_1532441651082_1728752697","id":"20180722-220815_1080885133","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14032"},{"text":"%md # DataFrame Transformations\n\nWhen working with individual DataFrames there are some fundamental objectives.\nThese break down into several core operations,\n1. We can add rows or columns\n2. We can remove rows or columns\n3. We can transform a row into a column (or vice versa)\n4. We can change the order of rows based on the values in columns","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>DataFrame Transformations</h1>\n<p>When working with individual DataFrames there are some fundamental objectives.<br/>These break down into several core operations,<br/>1. We can add rows or columns<br/>2. We can remove rows or columns<br/>3. We can transform a row into a column (or vice versa)<br/>4. We can change the order of rows based on the values in columns</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651082_809207347","id":"20180722-220844_1848108609","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14033"},{"text":"%md ## Creating DataFrames\nLet create a sample dataframe to play with\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651083_1828020494","id":"20180722-221210_152606083","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14034"},{"text":"//load the data from file\nval df = spark.read.format(\"json\").load(s\"$base_path/data/flight-data/json/2015-summary.json\")\n\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df: org.apache.spark.sql.DataFrame = [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1532441651083_1905787624","id":"20180722-221246_151192572","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14035"},{"text":"//create a table\ndf.createOrReplaceTempView(\"dfTable\")\n\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1532441651084_-1799392958","id":"20180722-221314_780491298","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14036"},{"text":"%md ### select and selectExpr\nselect and selectExpr allow you to do the DataFrame equivalent of SQL queries on a table of data:","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>select and selectExpr</h3>\n<p>select and selectExpr allow you to do the DataFrame equivalent of SQL queries on a table of data:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651085_-1297550626","id":"20180722-221918_520865473","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14037"},{"text":"%md\n","user":"anonymous","dateUpdated":"2018-07-24T12:26:13-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532449573136_-1713038332","id":"20180724-122613_376572591","dateCreated":"2018-07-24T12:26:13-0400","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:14038"},{"text":"%sql\n\nSELECT * FROM dfTable\n\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DEST_COUNTRY_NAME":"string","ORIGIN_COUNTRY_NAME":"string","count":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"DEST_COUNTRY_NAME\tORIGIN_COUNTRY_NAME\tcount\nUnited States\tRomania\t15\nUnited States\tCroatia\t1\nUnited States\tIreland\t344\nEgypt\tUnited States\t15\nUnited States\tIndia\t62\nUnited States\tSingapore\t1\nUnited States\tGrenada\t62\nCosta Rica\tUnited States\t588\nSenegal\tUnited States\t40\nMoldova\tUnited States\t1\nUnited States\tSint Maarten\t325\nUnited States\tMarshall Islands\t39\nGuyana\tUnited States\t64\nMalta\tUnited States\t1\nAnguilla\tUnited States\t41\nBolivia\tUnited States\t30\nUnited States\tParaguay\t6\nAlgeria\tUnited States\t4\nTurks and Caicos Islands\tUnited States\t230\nUnited States\tGibraltar\t1\nSaint Vincent and the Grenadines\tUnited States\t1\nItaly\tUnited States\t382\nUnited States\tFederated States of Micronesia\t69\nUnited States\tRussia\t161\nPakistan\tUnited States\t12\nUnited States\tNetherlands\t660\nIceland\tUnited States\t181\nMarshall Islands\tUnited States\t42\nLuxembourg\tUnited States\t155\nHonduras\tUnited States\t362\nThe Bahamas\tUnited States\t955\nUnited States\tSenegal\t42\nEl Salvador\tUnited States\t561\nSamoa\tUnited States\t25\nUnited States\tAngola\t13\nSwitzerland\tUnited States\t294\nUnited States\tAnguilla\t38\nSint Maarten\tUnited States\t325\nHong Kong\tUnited States\t332\nTrinidad and Tobago\tUnited States\t211\nLatvia\tUnited States\t19\nUnited States\tEcuador\t300\nSuriname\tUnited States\t1\nMexico\tUnited States\t7140\nUnited States\tCyprus\t1\nEcuador\tUnited States\t268\nUnited States\tPortugal\t134\nUnited States\tCosta Rica\t608\nUnited States\tGuatemala\t318\nUnited States\tSuriname\t34\nColombia\tUnited States\t873\nUnited States\tCape Verde\t14\nUnited States\tJamaica\t712\nNorway\tUnited States\t121\nUnited States\tMalaysia\t3\nUnited States\tMorocco\t19\nThailand\tUnited States\t3\nUnited States\tSamoa\t25\nVenezuela\tUnited States\t290\nUnited States\tPalau\t31\nUnited States\tVenezuela\t246\nPanama\tUnited States\t510\nAntigua and Barbuda\tUnited States\t126\nUnited States\tChile\t185\nMorocco\tUnited States\t15\nUnited States\tFinland\t28\nAzerbaijan\tUnited States\t21\nUnited States\tGreece\t23\nUnited States\tThe Bahamas\t986\nNew Zealand\tUnited States\t111\nLiberia\tUnited States\t2\nUnited States\tHong Kong\t414\nHungary\tUnited States\t2\nUnited States\tChina\t920\nUnited States\tVietnam\t2\nBurkina Faso\tUnited States\t1\nSweden\tUnited States\t118\nUnited States\tKuwait\t28\nUnited States\tDominican Republic\t1420\nUnited States\tEgypt\t12\nIsrael\tUnited States\t134\nUnited States\tUnited States\t370002\nEthiopia\tUnited States\t13\nUnited States\tLuxembourg\t134\nUnited States\tPoland\t33\nMartinique\tUnited States\t44\nUnited States\tSaint Barthelemy\t41\nSaint Barthelemy\tUnited States\t39\nBarbados\tUnited States\t154\nUnited States\tTurkey\t129\nDjibouti\tUnited States\t1\nUnited States\tAzerbaijan\t21\nUnited States\tEstonia\t1\nGermany\tUnited States\t1468\nUnited States\tSouth Korea\t827\nUnited States\tEl Salvador\t508\nIreland\tUnited States\t335\nUnited States\tHungary\t3\nZambia\tUnited States\t1\nMalaysia\tUnited States\t2\nUnited States\tEthiopia\t12\nUnited States\tPanama\t465\nUnited States\tAruba\t342\nUnited States\tThailand\t4\nUnited States\tTurks and Caicos Islands\t236\nCroatia\tUnited States\t2\nUnited States\tPakistan\t12\nCyprus\tUnited States\t1\nUnited States\tHonduras\t407\nFiji\tUnited States\t24\nQatar\tUnited States\t108\nSaint Kitts and Nevis\tUnited States\t139\nKuwait\tUnited States\t32\nTaiwan\tUnited States\t266\nHaiti\tUnited States\t226\nCanada\tUnited States\t8399\nFederated States of Micronesia\tUnited States\t69\nUnited States\tLiberia\t2\nJamaica\tUnited States\t666\nUnited States\tMalta\t2\nDominican Republic\tUnited States\t1353\nJapan\tUnited States\t1548\nUnited States\tLithuania\t1\nFinland\tUnited States\t26\nUnited States\tGuadeloupe\t59\nUnited States\tUkraine\t13\nUnited States\tFrance\t952\nUnited States\tNorway\t115\nAruba\tUnited States\t346\nFrench Guiana\tUnited States\t5\nUnited States\tKiribati\t35\nIndia\tUnited States\t61\nBritish Virgin Islands\tUnited States\t107\nBrazil\tUnited States\t853\nUnited States\tGermany\t1336\nUnited States\tNew Zealand\t74\nFrench Polynesia\tUnited States\t43\nUnited Arab Emirates\tUnited States\t320\nSingapore\tUnited States\t3\nUnited States\tMexico\t7187\nUnited States\tSweden\t119\nNetherlands\tUnited States\t776\nUnited States\tMartinique\t43\nUnited States\tUnited Arab Emirates\t313\nUnited States\tBulgaria\t1\nDenmark\tUnited States\t153\nChina\tUnited States\t772\nUnited States\tNicaragua\t201\nUnited States\tPhilippines\t126\nUnited States\tGeorgia\t1\nUnited States\tBelgium\t228\nCayman Islands\tUnited States\t314\nArgentina\tUnited States\t180\nPeru\tUnited States\t279\nSouth Africa\tUnited States\t36\nUnited States\tIceland\t202\nUnited States\tArgentina\t141\nSpain\tUnited States\t420\nBermuda\tUnited States\t183\nUnited States\tNigeria\t50\nUnited States\tAustria\t63\nUnited States\tBonaire, Sint Eustatius, and Saba\t59\nKiribati\tUnited States\t26\nSaudi Arabia\tUnited States\t83\nCzech Republic\tUnited States\t13\nUnited States\tIsrael\t127\nBelgium\tUnited States\t259\nUnited States\tSaint Lucia\t136\nUnited States\tBahrain\t1\nUnited States\tBritish Virgin Islands\t80\nCuracao\tUnited States\t90\nGeorgia\tUnited States\t2\nUnited States\tDenmark\t152\nUnited States\tGuyana\t63\nPhilippines\tUnited States\t134\nGrenada\tUnited States\t53\nCape Verde\tUnited States\t20\nCote d'Ivoire\tUnited States\t1\nUkraine\tUnited States\t14\nUnited States\tPapua New Guinea\t1\nRussia\tUnited States\t176\nUnited States\tSaudi Arabia\t70\nGuatemala\tUnited States\t397\nSaint Lucia\tUnited States\t123\nParaguay\tUnited States\t60\nUnited States\tCuracao\t83\nKosovo\tUnited States\t1\nUnited States\tTaiwan\t235\nTunisia\tUnited States\t3\nUnited States\tSouth Africa\t40\nNiger\tUnited States\t2\nTurkey\tUnited States\t138\nUnited Kingdom\tUnited States\t2025\nRomania\tUnited States\t14\nUnited States\tGreenland\t4\nPapua New Guinea\tUnited States\t3\nUnited States\tSpain\t442\nIraq\tUnited States\t1\nUnited States\tItaly\t438\nCuba\tUnited States\t466\nUnited States\tSwitzerland\t305\nDominica\tUnited States\t20\nUnited States\tJapan\t1496\nPortugal\tUnited States\t127\nUnited States\tBrazil\t619\nBahrain\tUnited States\t19\nUnited States\tPeru\t337\nIndonesia\tUnited States\t1\nUnited States\tBelize\t193\nUnited States\tUnited Kingdom\t1970\nBelize\tUnited States\t188\nUnited States\tGhana\t20\nUnited States\tIndonesia\t2\nUnited States\tFiji\t25\nUnited States\tCanada\t8483\nUnited States\tAntigua and Barbuda\t117\nUnited States\tFrench Polynesia\t40\nNicaragua\tUnited States\t179\nUnited States\tLatvia\t15\nUnited States\tDominica\t27\nUnited States\tCzech Republic\t12\nUnited States\tAustralia\t258\nUnited States\tCook Islands\t13\nAustria\tUnited States\t62\nJordan\tUnited States\t44\nPalau\tUnited States\t30\nSouth Korea\tUnited States\t1048\nAngola\tUnited States\t15\nGhana\tUnited States\t18\nNew Caledonia\tUnited States\t1\nGuadeloupe\tUnited States\t56\nFrance\tUnited States\t935\nPoland\tUnited States\t32\nNigeria\tUnited States\t59\nUnited States\tUruguay\t13\nGreenland\tUnited States\t2\nUnited States\tBermuda\t193\nChile\tUnited States\t174\nUnited States\tCuba\t478\nUnited States\tMontenegro\t1\nUnited States\tColombia\t867\nUnited States\tBarbados\t130\nUnited States\tQatar\t109\nAustralia\tUnited States\t329\nUnited States\tCayman Islands\t310\nUnited States\tJordan\t44\nUnited States\tNamibia\t1\nUnited States\tTrinidad and Tobago\t217\nUnited States\tBolivia\t13\nCook Islands\tUnited States\t13\nBulgaria\tUnited States\t3\nUnited States\tSaint Kitts and Nevis\t145\nUruguay\tUnited States\t43\nUnited States\tHaiti\t225\nBonaire, Sint Eustatius, and Saba\tUnited States\t58\nGreece\tUnited States\t30\n"}]},"apps":[],"jobName":"paragraph_1532441651085_-1242262076","id":"20180722-222123_578652601","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14039"},{"text":"%sql\nSELECT columnName FROM dataFrameTable\nSELECT columnName * 10, otherColumn, someOtherCol as c FROM dataFrameTable\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651086_-106742393","id":"20180722-222251_875010543","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14040"},{"text":"%md In the simplest possible terms, you can use them to manipulate columns in your DataFrames. Let’s walk through some examples on DataFrames to \ntalk about some of the different ways of approaching this problem. The easiest way is just to use the select method and pass in the column names as strings with which you would like to work:\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651087_664966791","id":"20180722-222405_1659759740","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14041"},{"text":"\n// in Scala\ndf.select(\"DEST_COUNTRY_NAME\").show(2)","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651088_882118293","id":"20180722-222506_1226401409","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14042"},{"text":"%md You can select multiple columns by using the same style of query, just add more column name strings to your select method call:","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>You can select multiple columns by using the same style of query, just add more column name strings to your select method call:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651088_913979729","id":"20180722-222610_1569184216","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14043"},{"text":"// in Scala\ndf.select(\"DEST_COUNTRY_NAME\", \"ORIGIN_COUNTRY_NAME\").show(2)","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651090_-107094647","id":"20180722-222646_84173971","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14044"},{"text":"%sql\nSELECT DEST_COUNTRY_NAME, ORIGIN_COUNTRY_NAME FROM dfTable LIMIT 2\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DEST_COUNTRY_NAME":"string","ORIGIN_COUNTRY_NAME":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"DEST_COUNTRY_NAME\tORIGIN_COUNTRY_NAME\nUnited States\tRomania\nUnited States\tCroatia\n"}]},"apps":[],"jobName":"paragraph_1532441651091_1667084877","id":"20180722-222700_363244948","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14045"},{"text":"%sql\nSELECT DEST_COUNTRY_NAME FROM dfTable LIMIT 2","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DEST_COUNTRY_NAME":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"DEST_COUNTRY_NAME\nUnited States\nUnited States\n"}]},"apps":[],"jobName":"paragraph_1532441651092_-1982818109","id":"20180722-222520_2029820752","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14046"},{"text":"%md you can refer to columns in a number of different ways; all you need to keep in mind is that you can use them interchangeably\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651092_-1697273920","id":"20180722-223433_1651573573","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14047"},{"text":"import org.apache.spark.sql.functions.{expr, col, column}\n\ndf.select(df.col(\"DEST_COUNTRY_NAME\"),\ncol(\"DEST_COUNTRY_NAME\"),\ncolumn(\"DEST_COUNTRY_NAME\"),\n'DEST_COUNTRY_NAME, \n$\"DEST_COUNTRY_NAME\",\nexpr(\"DEST_COUNTRY_NAME\")).show(2)\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions.{expr, col, column}\n+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+\n|DEST_COUNTRY_NAME|DEST_COUNTRY_NAME|DEST_COUNTRY_NAME|DEST_COUNTRY_NAME|DEST_COUNTRY_NAME|DEST_COUNTRY_NAME|\n+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+\n|    United States|    United States|    United States|    United States|    United States|    United States|\n|    United States|    United States|    United States|    United States|    United States|    United States|\n+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+\nonly showing top 2 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532441651093_2108343886","id":"20180722-223440_1160204309","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14048"},{"text":"%md This will not work, because you are mixing different types","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>This will not work, because you are mixing different types</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651094_-826797492","id":"20180722-223653_1567703233","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14049"},{"text":"df.select(col(\"DEST_COUNTRY_NAME\"), \"DEST_COUNTRY_NAME\")","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:35: error: overloaded method value select with alternatives:\n  [U1, U2](c1: org.apache.spark.sql.TypedColumn[org.apache.spark.sql.Row,U1], c2: org.apache.spark.sql.TypedColumn[org.apache.spark.sql.Row,U2])org.apache.spark.sql.Dataset[(U1, U2)] <and>\n  (col: String,cols: String*)org.apache.spark.sql.DataFrame <and>\n  (cols: org.apache.spark.sql.Column*)org.apache.spark.sql.DataFrame\n cannot be applied to (org.apache.spark.sql.Column, String)\n       df.select(col(\"DEST_COUNTRY_NAME\"), \"DEST_COUNTRY_NAME\")\n          ^\n"}]},"apps":[],"jobName":"paragraph_1532441651095_-1761817804","id":"20180722-223650_557923898","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14050"},{"text":"%md expr is the most flexible reference that we can use. \nIt can refer to a plain column or a string manipulation of a column. \nTo illustrate, let’s change the column name, and then change it back by using the AS keyword and then the alias method on the column:","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651095_-940063423","id":"20180722-223742_1421466553","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14051"},{"text":"// in Scala\ndf.select(expr(\"DEST_COUNTRY_NAME AS destination\")).show(2)","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+\n|  destination|\n+-------------+\n|United States|\n|United States|\n+-------------+\nonly showing top 2 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532441651096_2076268391","id":"20180722-223831_1834205833","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14052"},{"text":"%sql\nSELECT DEST_COUNTRY_NAME as destination FROM dfTable LIMIT 2","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"destination":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"destination\nUnited States\nUnited States\n"}]},"apps":[],"jobName":"paragraph_1532441651096_-469520736","id":"20180722-223848_1510640002","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14053"},{"text":"// You can also do \n// in Scala\ndf.select(expr(\"DEST_COUNTRY_NAME as destination\").alias(\"DEST_COUNTRY_NAME\")).show(2)\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+\n|DEST_COUNTRY_NAME|\n+-----------------+\n|    United States|\n|    United States|\n+-----------------+\nonly showing top 2 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532441651097_1425858748","id":"20180722-224301_308663998","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14054"},{"text":"%md We can treat selectExpr as a simple way to build up complex expressions that create new DataFrames. \nIn fact, we can add any valid non-aggregating SQL statement, and as long as the columns resolve,\nit will be valid! Here’s a simple example that adds a new column withinCountry to our DataFrame that specifies whether the destination and origin are the same:","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651098_383607399","id":"20180722-224421_632241075","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14055"},{"text":"// in Scala\ndf.selectExpr(\n    \"*\", // include all original columns \n    \"(DEST_COUNTRY_NAME = ORIGIN_COUNTRY_NAME) as withinCountry\"\n    ).show(2)","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+-------------------+-----+-------------+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|withinCountry|\n+-----------------+-------------------+-----+-------------+\n|    United States|            Romania|   15|        false|\n|    United States|            Croatia|    1|        false|\n+-----------------+-------------------+-----+-------------+\nonly showing top 2 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532441651098_70919744","id":"20180722-224534_1534609107","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14056"},{"text":"%md In sql\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651099_-430130005","id":"20180722-224624_155103016","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14057"},{"text":"%sql\nSELECT *, (DEST_COUNTRY_NAME = ORIGIN_COUNTRY_NAME) as withinCountry FROM dfTable LIMIT 2\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DEST_COUNTRY_NAME":"string","ORIGIN_COUNTRY_NAME":"string","count":"string","withinCountry":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"DEST_COUNTRY_NAME\tORIGIN_COUNTRY_NAME\tcount\twithinCountry\nUnited States\tRomania\t15\tfalse\nUnited States\tCroatia\t1\tfalse\n"}]},"apps":[],"jobName":"paragraph_1532441651102_1019993373","id":"20180722-224654_1135236240","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14058"},{"text":"%md\nWith select expression, we can also specify aggregations over the entire DataFrame by taking advantage of the functions that we have. These look just like what we have been showing so far:\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651103_-1083452346","id":"20180722-224839_1739045442","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14059"},{"text":"df.selectExpr(\"avg(count)\", \"count(distinct(DEST_COUNTRY_NAME))\").show(2)\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------+---------------------------------+\n| avg(count)|count(DISTINCT DEST_COUNTRY_NAME)|\n+-----------+---------------------------------+\n|1770.765625|                              132|\n+-----------+---------------------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1532441651104_-1311884387","id":"20180722-224908_762654230","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14060"},{"text":"%sql\nSELECT avg(count), count(distinct(DEST_COUNTRY_NAME)) FROM dfTable LIMIT 2","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"avg(count)":"string","count(DISTINCT DEST_COUNTRY_NAME)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"avg(count)\tcount(DISTINCT DEST_COUNTRY_NAME)\n1770.765625\t132\n"}]},"apps":[],"jobName":"paragraph_1532441651106_-907110901","id":"20180722-224929_752472068","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14061"},{"text":"%md ## Converting to Spark Types (Literals)\n\nSometimes, we need to pass explicit values into Spark that are just a value (rather than a new column). This might be a constant value or something we’ll need to compare to later on. \nThe way we do this is through literals. This is basically a translation from a given programming language’s literal value to one that Spark understands. Literals are expressions and you can use them in the same way:\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651107_-1361550073","id":"20180722-225013_731933695","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14062"},{"text":"import org.apache.spark.sql.functions.litdf.select(expr(\"*\"), lit(1).as(\"One\")).show(2)\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651108_226247564","id":"20180722-225032_697341760","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14063"},{"text":"//in scala\ndf.select(expr(\"*\"), lit(1).as(\"One\")).show(2)","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651109_1331586390","id":"20180722-225111_572188017","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14064"},{"text":"%sql\nSELECT *, 1 as One FROM dfTable LIMIT 2","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DEST_COUNTRY_NAME":"string","ORIGIN_COUNTRY_NAME":"string","count":"string","One":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"DEST_COUNTRY_NAME\tORIGIN_COUNTRY_NAME\tcount\tOne\nUnited States\tRomania\t15\t1\nUnited States\tCroatia\t1\t1\n"}]},"apps":[],"jobName":"paragraph_1532441651109_603804602","id":"20180722-225130_203405940","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14065"},{"text":"%md ## Adding Columns\nThere’s also a more formal way of adding a new column to a DataFrame, and that’s by using the withColumn method on our DataFrame. For example, let’s add a column that just adds the number one as a column:\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Adding Columns</h2>\n<p>There’s also a more formal way of adding a new column to a DataFrame, and that’s by using the withColumn method on our DataFrame. For example, let’s add a column that just adds the number one as a column:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651110_833651842","id":"20180722-225218_1392267978","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14066"},{"text":"df.withColumn(\"numberOne\", lit(1)).show(2)\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+-------------------+-----+---------+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|numberOne|\n+-----------------+-------------------+-----+---------+\n|    United States|            Romania|   15|        1|\n|    United States|            Croatia|    1|        1|\n+-----------------+-------------------+-----+---------+\nonly showing top 2 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532441651110_234511853","id":"20180722-225501_1177319344","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14067"},{"text":"%sql\nSELECT *, 1 as numberOne FROM dfTable LIMIT 2","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DEST_COUNTRY_NAME":"string","ORIGIN_COUNTRY_NAME":"string","count":"string","numberOne":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"DEST_COUNTRY_NAME\tORIGIN_COUNTRY_NAME\tcount\tnumberOne\nUnited States\tRomania\t15\t1\nUnited States\tCroatia\t1\t1\n"}]},"apps":[],"jobName":"paragraph_1532441651111_-1807339241","id":"20180722-225517_1430334314","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14068"},{"text":"%md Let’s do something a bit more interesting and make it an actual expression. In the next example, we’ll set a Boolean flag for when the origin country is the same as the destination country:\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Let’s do something a bit more interesting and make it an actual expression. In the next example, we’ll set a Boolean flag for when the origin country is the same as the destination country:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651111_1371071728","id":"20180722-225613_643366376","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14069"},{"text":"df.withColumn(\"withinCountry\", expr(\"ORIGIN_COUNTRY_NAME == DEST_COUNTRY_NAME\")).show(2)\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+-------------------+-----+-------------+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|withinCountry|\n+-----------------+-------------------+-----+-------------+\n|    United States|            Romania|   15|        false|\n|    United States|            Croatia|    1|        false|\n+-----------------+-------------------+-----+-------------+\nonly showing top 2 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532441651114_-3407251","id":"20180722-225631_2068051879","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14070"},{"text":"%md ## Renaming Columns\nYou can use the withColumnRenamed method. This will rename the column with the name of the string in the first argument to the string in the second argument","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Renaming Columns</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651115_1848005847","id":"20180722-225735_854803898","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14071"},{"text":"df.withColumnRenamed(\"DEST_COUNTRY_NAME\", \"dest\").columns\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res72: Array[String] = Array(dest, ORIGIN_COUNTRY_NAME, count)\n"}]},"apps":[],"jobName":"paragraph_1532441651116_-1593425571","id":"20180722-225832_2034462288","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14072"},{"text":"%md ## Removing Columns","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Removing Columns</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651117_-1697410868","id":"20180722-225917_1762139911","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14073"},{"text":"df.drop(\"ORIGIN_COUNTRY_NAME\").columns\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res74: Array[String] = Array(DEST_COUNTRY_NAME, count)\n"}]},"apps":[],"jobName":"paragraph_1532441651118_-1844944508","id":"20180722-230017_1057960921","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14074"},{"text":"%md We can drop multiple columns by passing in multiple columns as arguments:","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>We can drop multiple columns by passing in multiple columns as arguments:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651119_-513184574","id":"20180722-230136_360882248","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14075"},{"text":"dfWithLongColName.drop(\"ORIGIN_COUNTRY_NAME\", \"DEST_COUNTRY_NAME\")\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:31: error: not found: value dfWithLongColName\n       dfWithLongColName.drop(\"ORIGIN_COUNTRY_NAME\", \"DEST_COUNTRY_NAME\")\n       ^\n"}]},"apps":[],"jobName":"paragraph_1532441651119_-364508908","id":"20180722-230302_716388696","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14076"},{"text":"%md ## Changing a Column’s Type (cast)\n\nSometimes, we might need to convert from one type to another; for example, if we have a set of StringType that should be integers. \nWe can convert columns from one type to another by casting the column from one type to another.\nFor instance, let’s convert our count column from an integer to a type Long:","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651120_-1915136242","id":"20180723-111503_2078569405","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14077"},{"text":"\ndf.withColumn(\"count2\", col(\"count\").cast(\"long\"))","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651121_816157394","id":"20180723-111537_365165461","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14078"},{"text":"%sql\n-- in SQL\nSELECT *, cast(count as long) AS count2 FROM dfTable","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DEST_COUNTRY_NAME":"string","ORIGIN_COUNTRY_NAME":"string","count":"string","count2":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"DEST_COUNTRY_NAME\tORIGIN_COUNTRY_NAME\tcount\tcount2\nUnited States\tRomania\t15\t15\nUnited States\tCroatia\t1\t1\nUnited States\tIreland\t344\t344\nEgypt\tUnited States\t15\t15\nUnited States\tIndia\t62\t62\nUnited States\tSingapore\t1\t1\nUnited States\tGrenada\t62\t62\nCosta Rica\tUnited States\t588\t588\nSenegal\tUnited States\t40\t40\nMoldova\tUnited States\t1\t1\nUnited States\tSint Maarten\t325\t325\nUnited States\tMarshall Islands\t39\t39\nGuyana\tUnited States\t64\t64\nMalta\tUnited States\t1\t1\nAnguilla\tUnited States\t41\t41\nBolivia\tUnited States\t30\t30\nUnited States\tParaguay\t6\t6\nAlgeria\tUnited States\t4\t4\nTurks and Caicos Islands\tUnited States\t230\t230\nUnited States\tGibraltar\t1\t1\nSaint Vincent and the Grenadines\tUnited States\t1\t1\nItaly\tUnited States\t382\t382\nUnited States\tFederated States of Micronesia\t69\t69\nUnited States\tRussia\t161\t161\nPakistan\tUnited States\t12\t12\nUnited States\tNetherlands\t660\t660\nIceland\tUnited States\t181\t181\nMarshall Islands\tUnited States\t42\t42\nLuxembourg\tUnited States\t155\t155\nHonduras\tUnited States\t362\t362\nThe Bahamas\tUnited States\t955\t955\nUnited States\tSenegal\t42\t42\nEl Salvador\tUnited States\t561\t561\nSamoa\tUnited States\t25\t25\nUnited States\tAngola\t13\t13\nSwitzerland\tUnited States\t294\t294\nUnited States\tAnguilla\t38\t38\nSint Maarten\tUnited States\t325\t325\nHong Kong\tUnited States\t332\t332\nTrinidad and Tobago\tUnited States\t211\t211\nLatvia\tUnited States\t19\t19\nUnited States\tEcuador\t300\t300\nSuriname\tUnited States\t1\t1\nMexico\tUnited States\t7140\t7140\nUnited States\tCyprus\t1\t1\nEcuador\tUnited States\t268\t268\nUnited States\tPortugal\t134\t134\nUnited States\tCosta Rica\t608\t608\nUnited States\tGuatemala\t318\t318\nUnited States\tSuriname\t34\t34\nColombia\tUnited States\t873\t873\nUnited States\tCape Verde\t14\t14\nUnited States\tJamaica\t712\t712\nNorway\tUnited States\t121\t121\nUnited States\tMalaysia\t3\t3\nUnited States\tMorocco\t19\t19\nThailand\tUnited States\t3\t3\nUnited States\tSamoa\t25\t25\nVenezuela\tUnited States\t290\t290\nUnited States\tPalau\t31\t31\nUnited States\tVenezuela\t246\t246\nPanama\tUnited States\t510\t510\nAntigua and Barbuda\tUnited States\t126\t126\nUnited States\tChile\t185\t185\nMorocco\tUnited States\t15\t15\nUnited States\tFinland\t28\t28\nAzerbaijan\tUnited States\t21\t21\nUnited States\tGreece\t23\t23\nUnited States\tThe Bahamas\t986\t986\nNew Zealand\tUnited States\t111\t111\nLiberia\tUnited States\t2\t2\nUnited States\tHong Kong\t414\t414\nHungary\tUnited States\t2\t2\nUnited States\tChina\t920\t920\nUnited States\tVietnam\t2\t2\nBurkina Faso\tUnited States\t1\t1\nSweden\tUnited States\t118\t118\nUnited States\tKuwait\t28\t28\nUnited States\tDominican Republic\t1420\t1420\nUnited States\tEgypt\t12\t12\nIsrael\tUnited States\t134\t134\nUnited States\tUnited States\t370002\t370002\nEthiopia\tUnited States\t13\t13\nUnited States\tLuxembourg\t134\t134\nUnited States\tPoland\t33\t33\nMartinique\tUnited States\t44\t44\nUnited States\tSaint Barthelemy\t41\t41\nSaint Barthelemy\tUnited States\t39\t39\nBarbados\tUnited States\t154\t154\nUnited States\tTurkey\t129\t129\nDjibouti\tUnited States\t1\t1\nUnited States\tAzerbaijan\t21\t21\nUnited States\tEstonia\t1\t1\nGermany\tUnited States\t1468\t1468\nUnited States\tSouth Korea\t827\t827\nUnited States\tEl Salvador\t508\t508\nIreland\tUnited States\t335\t335\nUnited States\tHungary\t3\t3\nZambia\tUnited States\t1\t1\nMalaysia\tUnited States\t2\t2\nUnited States\tEthiopia\t12\t12\nUnited States\tPanama\t465\t465\nUnited States\tAruba\t342\t342\nUnited States\tThailand\t4\t4\nUnited States\tTurks and Caicos Islands\t236\t236\nCroatia\tUnited States\t2\t2\nUnited States\tPakistan\t12\t12\nCyprus\tUnited States\t1\t1\nUnited States\tHonduras\t407\t407\nFiji\tUnited States\t24\t24\nQatar\tUnited States\t108\t108\nSaint Kitts and Nevis\tUnited States\t139\t139\nKuwait\tUnited States\t32\t32\nTaiwan\tUnited States\t266\t266\nHaiti\tUnited States\t226\t226\nCanada\tUnited States\t8399\t8399\nFederated States of Micronesia\tUnited States\t69\t69\nUnited States\tLiberia\t2\t2\nJamaica\tUnited States\t666\t666\nUnited States\tMalta\t2\t2\nDominican Republic\tUnited States\t1353\t1353\nJapan\tUnited States\t1548\t1548\nUnited States\tLithuania\t1\t1\nFinland\tUnited States\t26\t26\nUnited States\tGuadeloupe\t59\t59\nUnited States\tUkraine\t13\t13\nUnited States\tFrance\t952\t952\nUnited States\tNorway\t115\t115\nAruba\tUnited States\t346\t346\nFrench Guiana\tUnited States\t5\t5\nUnited States\tKiribati\t35\t35\nIndia\tUnited States\t61\t61\nBritish Virgin Islands\tUnited States\t107\t107\nBrazil\tUnited States\t853\t853\nUnited States\tGermany\t1336\t1336\nUnited States\tNew Zealand\t74\t74\nFrench Polynesia\tUnited States\t43\t43\nUnited Arab Emirates\tUnited States\t320\t320\nSingapore\tUnited States\t3\t3\nUnited States\tMexico\t7187\t7187\nUnited States\tSweden\t119\t119\nNetherlands\tUnited States\t776\t776\nUnited States\tMartinique\t43\t43\nUnited States\tUnited Arab Emirates\t313\t313\nUnited States\tBulgaria\t1\t1\nDenmark\tUnited States\t153\t153\nChina\tUnited States\t772\t772\nUnited States\tNicaragua\t201\t201\nUnited States\tPhilippines\t126\t126\nUnited States\tGeorgia\t1\t1\nUnited States\tBelgium\t228\t228\nCayman Islands\tUnited States\t314\t314\nArgentina\tUnited States\t180\t180\nPeru\tUnited States\t279\t279\nSouth Africa\tUnited States\t36\t36\nUnited States\tIceland\t202\t202\nUnited States\tArgentina\t141\t141\nSpain\tUnited States\t420\t420\nBermuda\tUnited States\t183\t183\nUnited States\tNigeria\t50\t50\nUnited States\tAustria\t63\t63\nUnited States\tBonaire, Sint Eustatius, and Saba\t59\t59\nKiribati\tUnited States\t26\t26\nSaudi Arabia\tUnited States\t83\t83\nCzech Republic\tUnited States\t13\t13\nUnited States\tIsrael\t127\t127\nBelgium\tUnited States\t259\t259\nUnited States\tSaint Lucia\t136\t136\nUnited States\tBahrain\t1\t1\nUnited States\tBritish Virgin Islands\t80\t80\nCuracao\tUnited States\t90\t90\nGeorgia\tUnited States\t2\t2\nUnited States\tDenmark\t152\t152\nUnited States\tGuyana\t63\t63\nPhilippines\tUnited States\t134\t134\nGrenada\tUnited States\t53\t53\nCape Verde\tUnited States\t20\t20\nCote d'Ivoire\tUnited States\t1\t1\nUkraine\tUnited States\t14\t14\nUnited States\tPapua New Guinea\t1\t1\nRussia\tUnited States\t176\t176\nUnited States\tSaudi Arabia\t70\t70\nGuatemala\tUnited States\t397\t397\nSaint Lucia\tUnited States\t123\t123\nParaguay\tUnited States\t60\t60\nUnited States\tCuracao\t83\t83\nKosovo\tUnited States\t1\t1\nUnited States\tTaiwan\t235\t235\nTunisia\tUnited States\t3\t3\nUnited States\tSouth Africa\t40\t40\nNiger\tUnited States\t2\t2\nTurkey\tUnited States\t138\t138\nUnited Kingdom\tUnited States\t2025\t2025\nRomania\tUnited States\t14\t14\nUnited States\tGreenland\t4\t4\nPapua New Guinea\tUnited States\t3\t3\nUnited States\tSpain\t442\t442\nIraq\tUnited States\t1\t1\nUnited States\tItaly\t438\t438\nCuba\tUnited States\t466\t466\nUnited States\tSwitzerland\t305\t305\nDominica\tUnited States\t20\t20\nUnited States\tJapan\t1496\t1496\nPortugal\tUnited States\t127\t127\nUnited States\tBrazil\t619\t619\nBahrain\tUnited States\t19\t19\nUnited States\tPeru\t337\t337\nIndonesia\tUnited States\t1\t1\nUnited States\tBelize\t193\t193\nUnited States\tUnited Kingdom\t1970\t1970\nBelize\tUnited States\t188\t188\nUnited States\tGhana\t20\t20\nUnited States\tIndonesia\t2\t2\nUnited States\tFiji\t25\t25\nUnited States\tCanada\t8483\t8483\nUnited States\tAntigua and Barbuda\t117\t117\nUnited States\tFrench Polynesia\t40\t40\nNicaragua\tUnited States\t179\t179\nUnited States\tLatvia\t15\t15\nUnited States\tDominica\t27\t27\nUnited States\tCzech Republic\t12\t12\nUnited States\tAustralia\t258\t258\nUnited States\tCook Islands\t13\t13\nAustria\tUnited States\t62\t62\nJordan\tUnited States\t44\t44\nPalau\tUnited States\t30\t30\nSouth Korea\tUnited States\t1048\t1048\nAngola\tUnited States\t15\t15\nGhana\tUnited States\t18\t18\nNew Caledonia\tUnited States\t1\t1\nGuadeloupe\tUnited States\t56\t56\nFrance\tUnited States\t935\t935\nPoland\tUnited States\t32\t32\nNigeria\tUnited States\t59\t59\nUnited States\tUruguay\t13\t13\nGreenland\tUnited States\t2\t2\nUnited States\tBermuda\t193\t193\nChile\tUnited States\t174\t174\nUnited States\tCuba\t478\t478\nUnited States\tMontenegro\t1\t1\nUnited States\tColombia\t867\t867\nUnited States\tBarbados\t130\t130\nUnited States\tQatar\t109\t109\nAustralia\tUnited States\t329\t329\nUnited States\tCayman Islands\t310\t310\nUnited States\tJordan\t44\t44\nUnited States\tNamibia\t1\t1\nUnited States\tTrinidad and Tobago\t217\t217\nUnited States\tBolivia\t13\t13\nCook Islands\tUnited States\t13\t13\nBulgaria\tUnited States\t3\t3\nUnited States\tSaint Kitts and Nevis\t145\t145\nUruguay\tUnited States\t43\t43\nUnited States\tHaiti\t225\t225\nBonaire, Sint Eustatius, and Saba\tUnited States\t58\t58\nGreece\tUnited States\t30\t30\n"}]},"apps":[],"jobName":"paragraph_1532441651122_-1152762078","id":"20180723-111549_1670123889","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14079"},{"text":"%md ## Filtering Rows\nTo filter rows, we create an expression that evaluates to true or false. You then filter out the rows with an expression that is equal to false.\nThe most common way to do this with DataFrames is to create either an expression as a String or build an expression by using a set of column manipulations. \nThere are two methods to perform this operation: \n1. you can use where or filter\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Filtering Rows</h2>\n<p>To filter rows, we create an expression that evaluates to true or false. You then filter out the rows with an expression that is equal to false.<br/>The most common way to do this with DataFrames is to create either an expression as a String or build an expression by using a set of column manipulations.<br/>There are two methods to perform this operation:<br/>1. you can use where or filter</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651123_-1178430938","id":"20180723-111803_286947158","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14080"},{"text":"%md using \"filter\"\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651124_915327128","id":"20180723-112601_266710149","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14081"},{"text":"df.filter(col(\"count\") < 2).show(2)\n\n\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|    United States|            Croatia|    1|\n|    United States|          Singapore|    1|\n+-----------------+-------------------+-----+\nonly showing top 2 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532441651125_882105159","id":"20180723-112524_941628247","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14082"},{"text":"%md using where","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651126_1028184825","id":"20180723-112626_1303821926","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14083"},{"text":"df.where(\"count < 2\").show(2)","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|    United States|            Croatia|    1|\n|    United States|          Singapore|    1|\n+-----------------+-------------------+-----+\nonly showing top 2 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532441651127_-1568180182","id":"20180723-112619_1648869535","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14084"},{"text":"%sql \n-- in SQL\nSELECT * FROM dfTable WHERE count < 2 LIMIT 2","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DEST_COUNTRY_NAME":"string","ORIGIN_COUNTRY_NAME":"string","count":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"DEST_COUNTRY_NAME\tORIGIN_COUNTRY_NAME\tcount\nUnited States\tCroatia\t1\nUnited States\tSingapore\t1\n"}]},"apps":[],"jobName":"paragraph_1532441651127_257031708","id":"20180723-112645_2131394679","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14085"},{"text":"%md ## Using multiple filters\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651136_1447780989","id":"20180723-112809_1456862490","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14086"},{"text":"// in Scala\ndf.where(col(\"count\") < 2).where(col(\"ORIGIN_COUNTRY_NAME\") =!= \"Croatia\").show(2)\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|    United States|          Singapore|    1|\n|          Moldova|      United States|    1|\n+-----------------+-------------------+-----+\nonly showing top 2 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532441651137_547557239","id":"20180723-112852_93898567","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14087"},{"text":"%sql\n-- in SQL\nSELECT * FROM dfTable WHERE count < 2 AND ORIGIN_COUNTRY_NAME != \"Croatia\"LIMIT 2","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DEST_COUNTRY_NAME":"string","ORIGIN_COUNTRY_NAME":"string","count":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"DEST_COUNTRY_NAME\tORIGIN_COUNTRY_NAME\tcount\nUnited States\tSingapore\t1\nMoldova\tUnited States\t1\n"}]},"apps":[],"jobName":"paragraph_1532441651138_1152885082","id":"20180723-112927_1749472137","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14088"},{"text":"%md Getting Unique Rows\nA very common use case is to extract the unique or distinct values in a DataFrame. These values can be in one or more columns.\nThe way we do this is by using the distinct method on a DataFrame, which allows us to deduplicate any rows that are in that DataFrame.\nFor instance, let’s get the unique origins in our dataset. This, of course, is a transformation that will return a new DataFrame with only unique rows:\n\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651139_1974218781","id":"20180723-113107_1145509310","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14089"},{"text":"// in Scala\ndf.select(\"ORIGIN_COUNTRY_NAME\", \"DEST_COUNTRY_NAME\").distinct().count()\n\n\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651140_-1753095114","id":"20180723-113149_466185261","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14090"},{"text":"%sql\n-- in SQL \nSELECT COUNT(DISTINCT(ORIGIN_COUNTRY_NAME, DEST_COUNTRY_NAME)) FROM dfTable","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"count(DISTINCT named_struct(ORIGIN_COUNTRY_NAME, ORIGIN_COUNTRY_NAME, DEST_COUNTRY_NAME, DEST_COUNTRY_NAME))":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"count(DISTINCT named_struct(ORIGIN_COUNTRY_NAME, ORIGIN_COUNTRY_NAME, DEST_COUNTRY_NAME, DEST_COUNTRY_NAME))\n256\n"}]},"apps":[],"jobName":"paragraph_1532441651140_2045114580","id":"20180723-113244_459304870","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14091"},{"text":"%md ## Concatenating and Appending Rows (Union)\n\nDataFrames are immutable. This means users cannot append to DataFrames because that would be changing it.\nTo append to a DataFrame, you must union the original DataFrame along with the new DataFrame.\nThis just concatenates the two DataFramess. To union two DataFrames, you must be sure that they have the same schema and number of columns;\notherwise, the union will fail. see the example below\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Concatenating and Appending Rows (Union)</h2>\n<p>DataFrames are immutable. This means users cannot append to DataFrames because that would be changing it.<br/>To append to a DataFrame, you must union the original DataFrame along with the new DataFrame.<br/>This just concatenates the two DataFramess. To union two DataFrames, you must be sure that they have the same schema and number of columns;<br/>otherwise, the union will fail.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1532441651141_409506955","id":"20180723-113339_469567633","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14092"},{"text":"\n// in Scala\nimport org.apache.spark.sql.Row\n\nval schema = df.schema\nval newRows = Seq(  Row(\"New Country\", \"Other Country\", 5L),  Row(\"New Country 2\", \"Other Country 3\", 1L))\nval parallelizedRows = spark.sparkContext.parallelize(newRows)\nval newDF = spark.createDataFrame(parallelizedRows, schema)\ndf.union(newDF).where(\"count = 1\").where($\"ORIGIN_COUNTRY_NAME\" =!= \"United States\").show() // get all of them and we'll see our new rows at the end","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.Row\nschema: org.apache.spark.sql.types.StructType = StructType(StructField(DEST_COUNTRY_NAME,StringType,true), StructField(ORIGIN_COUNTRY_NAME,StringType,true), StructField(count,LongType,true))\nnewRows: Seq[org.apache.spark.sql.Row] = List([New Country,Other Country,5], [New Country 2,Other Country 3,1])\nparallelizedRows: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] = ParallelCollectionRDD[156] at parallelize at <console>:33\nnewDF: org.apache.spark.sql.DataFrame = [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 1 more field]\n+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|    United States|            Croatia|    1|\n|    United States|          Singapore|    1|\n|    United States|          Gibraltar|    1|\n|    United States|             Cyprus|    1|\n|    United States|            Estonia|    1|\n|    United States|          Lithuania|    1|\n|    United States|           Bulgaria|    1|\n|    United States|            Georgia|    1|\n|    United States|            Bahrain|    1|\n|    United States|   Papua New Guinea|    1|\n|    United States|         Montenegro|    1|\n|    United States|            Namibia|    1|\n|    New Country 2|    Other Country 3|    1|\n+-----------------+-------------------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1532441651142_618086999","id":"20180723-113449_478964385","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14093"},{"text":"%md ## Sorting Rows\n\nWhen we sort the values in a DataFrame, we always want to sort with either the largest or smallest values at the top of a DataFrame. \nThere are two equivalent operations to do this sort and orderBy that work the exact same way. \nThey accept both column expressions and strings as well as multiple columns. \nThe default is to sort in ascending order: See the example below:","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651142_-1285542565","id":"20180723-113811_333403174","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14094"},{"text":"// in Scala\ndf.sort(\"count\").show(5)\ndf.orderBy(\"count\", \"DEST_COUNTRY_NAME\").show(5)\ndf.orderBy(col(\"count\"), col(\"DEST_COUNTRY_NAME\")).show(5)\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+-------------------+-----+\n|   DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+--------------------+-------------------+-----+\n|               Malta|      United States|    1|\n|Saint Vincent and...|      United States|    1|\n|       United States|            Croatia|    1|\n|       United States|          Gibraltar|    1|\n|       United States|          Singapore|    1|\n+--------------------+-------------------+-----+\nonly showing top 5 rows\n\n+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|     Burkina Faso|      United States|    1|\n|    Cote d'Ivoire|      United States|    1|\n|           Cyprus|      United States|    1|\n|         Djibouti|      United States|    1|\n|        Indonesia|      United States|    1|\n+-----------------+-------------------+-----+\nonly showing top 5 rows\n\n+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|     Burkina Faso|      United States|    1|\n|    Cote d'Ivoire|      United States|    1|\n|           Cyprus|      United States|    1|\n|         Djibouti|      United States|    1|\n|        Indonesia|      United States|    1|\n+-----------------+-------------------+-----+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532441651143_-730207499","id":"20180723-113924_2146198636","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14095"},{"text":"%md To more explicitly specify sort direction, you need to use the asc and desc functions if operating on a column. \nThese allow you to specify the order in which a given column should be sorted:","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651143_-1070542708","id":"20180723-114058_1942647075","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14096"},{"text":"\n// in Scala\nimport org.apache.spark.sql.functions.{desc, asc}\ndf.orderBy(expr(\"count desc\")).show(2)\ndf.orderBy(desc(\"count\"), asc(\"DEST_COUNTRY_NAME\")).show(2)","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions.{desc, asc}\n+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|          Moldova|      United States|    1|\n|    United States|            Croatia|    1|\n+-----------------+-------------------+-----+\nonly showing top 2 rows\n\n+-----------------+-------------------+------+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME| count|\n+-----------------+-------------------+------+\n|    United States|      United States|370002|\n|    United States|             Canada|  8483|\n+-----------------+-------------------+------+\nonly showing top 2 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532441651144_1830607769","id":"20180723-121057_165749618","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14097"},{"text":"%sql\n-- in SQL\nSELECT * FROM dfTable ORDER BY count DESC, DEST_COUNTRY_NAME ASC LIMIT 2","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"DEST_COUNTRY_NAME":"string","ORIGIN_COUNTRY_NAME":"string","count":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"DEST_COUNTRY_NAME\tORIGIN_COUNTRY_NAME\tcount\nUnited States\tUnited States\t370002\nUnited States\tCanada\t8483\n"}]},"apps":[],"jobName":"paragraph_1532441651144_1900814068","id":"20180723-121133_283391591","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14098"},{"text":"%md \n## Collecting Rows to the Driver\n\nSpark maintains the state of the cluster in the driver. There are times when you’ll want to collect some of your data to the driver in order to manipulate it on your local machine.\ncollect gets all data from the entire DataFrame, take selects the first N rows, and show prints out a number of rows nicely.","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651145_1738027388","id":"20180723-121244_968847520","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14099"},{"text":"// in Scala\nval collectDF = df.limit(10)\ncollectDF.take(5) // take works with an Integer count\ncollectDF.show() // this prints it out nicely\ncollectDF.show(5, false)\ncollectDF.collect()\n","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"collectDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 1 more field]\nres97: Array[org.apache.spark.sql.Row] = Array([United States,Romania,15], [United States,Croatia,1], [United States,Ireland,344], [Egypt,United States,15], [United States,India,62])\n+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|    United States|            Romania|   15|\n|    United States|            Croatia|    1|\n|    United States|            Ireland|  344|\n|            Egypt|      United States|   15|\n|    United States|              India|   62|\n|    United States|          Singapore|    1|\n|    United States|            Grenada|   62|\n|       Costa Rica|      United States|  588|\n|          Senegal|      United States|   40|\n|          Moldova|      United States|    1|\n+-----------------+-------------------+-----+\n\n+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|United States    |Romania            |15   |\n|United States    |Croatia            |1    |\n|United States    |Ireland            |344  |\n|Egypt            |United States      |15   |\n|United States    |India              |62   |\n+-----------------+-------------------+-----+\nonly showing top 5 rows\n\nres100: Array[org.apache.spark.sql.Row] = Array([United States,Romania,15], [United States,Croatia,1], [United States,Ireland,344], [Egypt,United States,15], [United States,India,62], [United States,Singapore,1], [United States,Grenada,62], [Costa Rica,United States,588], [Senegal,United States,40], [Moldova,United States,1])\n"}]},"apps":[],"jobName":"paragraph_1532441651145_1362619202","id":"20180723-121344_1198608736","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14100"},{"text":"\n%md ## The End","user":"anonymous","dateUpdated":"2018-07-24T10:14:11-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532441651146_1566776988","id":"20180722-201556_727742913","dateCreated":"2018-07-24T10:14:11-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14101"}],"name":"Apache_Spark_Tutorial","id":"2DKJJ5D15","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}